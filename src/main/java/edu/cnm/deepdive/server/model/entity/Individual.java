package edu.cnm.deepdive.server.model.entity;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import edu.cnm.deepdive.server.view.FlatIndividual;
import edu.cnm.deepdive.server.view.FlatUser;
import java.net.URI;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;
import javax.annotation.PostConstruct;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.lang.NonNull;
import org.springframework.hateoas.server.EntityLinks;
import org.springframework.stereotype.Component;

/**
 * Establishing entity model.
 **/
@Component
@SuppressWarnings("JpaDataSourceORMInspection")
@Entity
@Table(
    name = "Individual",
    indexes = {
        @Index(columnList = "family_unit_number"),
    }
)

public class Individual implements FlatIndividual {

  /**
   * Creation of interface (EntityLinks) pointing model to resources.
   **/
  private static EntityLinks entityLinks;

  /** Establishing entity fields. **/

  /**
   * Individual id is non-nullable, autogenerated, and non-updateable.
   **/
  @NonNull
  @Id
  @GeneratedValue(generator = "uuid2")
  @GenericGenerator(name = "uuid2", strategy = "uuid2")
  @Column(name = "individual_id", columnDefinition = "CHAR(16) FOR BIT DATA",
      nullable = false, updatable = false)
  private UUID id;

  @OneToOne(fetch = FetchType.EAGER,
      cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
  @JoinColumn(name = "user_id")
  @JsonSerialize(contentAs = FlatUser.class)
  private User user;


  /**
   * Family unit number is non-nullable, and updateable.
   */
  @NonNull
  @Column(name = "family_unit_number", nullable = false, updatable = true)
  private int fun;


  /**
   * Creation of interface (EntityLinks) pointing model to resources.
   **/
  public static EntityLinks getEntityLinks() {
    return entityLinks;
  }

  /**
   * Spring looks for the class that matches this Autowired property and injects it automatically
   * into the application context.  @Autowired must be set for Spring to recognize it.
   **/
  @Autowired
  private void setEntityLinks(EntityLinks entityLinks) {
    Individual.entityLinks = entityLinks;
  }


  /**
   * Entity Setters and Getters.  Updateable fields have setters.
   **/

  @Override
  @NonNull
  public UUID getId() {
    return id;
  }

  /** Required for the class Individual. **/
  @Override
  public String getName() {
    return null;
  }

  public int getFun() {
    return fun;
  }

  public void setFun(int fun) {
    this.fun = fun;
  }

  @Override
  public URI getHref() {
    return entityLinks.linkForItemResource(User.class, id).toUri();
  }

  /**
   * The PostConstruct annotation is used on a method that needs to be executed after dependency
   * injection is done to perform any initialization. This method MUST be invoked before the class
   * is put into service.
   **/
  @PostConstruct
  private void init() {
    entityLinks.toString();
  }

}

